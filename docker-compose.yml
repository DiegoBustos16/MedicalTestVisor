services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  postgres-keycloak:
    image: postgres:15
    container_name: postgres-keycloak
    restart: always
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data

  keycloak:
    image: quay.io/keycloak/keycloak:26.1.3
    container_name: keycloak
    restart: always
    depends_on:
      - postgres-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
      TZ: America/Argentina/Buenos_Aires
      JAVA_OPTS: -Duser.timezone=America/Argentina/Buenos_Aires
    command: ["start-dev"]
    ports:
      - "8081:8080"

  eureka-server:
    build: ./discovery-service
    container_name: eureka-server
    ports:
      - "8761:8761"
  
  config-server:
    build: ./config-server
    container_name: config-server
    depends_on:
      - eureka-server
      - kafka
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "8888:8888"

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - keycloak
    volumes:
      - ./api-gateway:/app.jar

  test-microservice:
    build: ./test-microservice
    container_name: test-microservice
    depends_on:
      - kafka
      - eureka-server
      - mongodb
      - config-server
    volumes:
      - ./test-microservice:/app.jar

  mongodb:
    image: mongo:4.2
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: medical-test-db
    volumes:
      - mongodb_data:/data/db

  doctor-microservice:
    build: ./doctor-microservice
    container_name: doctor-microservice
    depends_on:
      - kafka
      - eureka-server
      - postgres-microservices
      - config-server
    volumes:
      - ./doctor-microservice:/app.jar
        
  patient-microservice:
    build: ./patient-microservice
    container_name: patient-microservice
    depends_on:
      - kafka
      - eureka-server
      - postgres-microservices
      - config-server
    volumes:
      - ./patient-microservice:/app.jar
  
  hospital-microservice:
    build: ./hospital-microservice
    container_name: hospital-microservice
    depends_on:
      - kafka
      - eureka-server
      - postgres-microservices
      - config-server
    volumes:
      - ./hospital-microservice:/app.jar

  postgres-microservices:
    image: postgres:15
    container_name: postgres-microservices
    restart: always
    environment:
      POSTGRES_DB: microservices_db
      POSTGRES_USER: microservices_user
      POSTGRES_PASSWORD: microservices_password
    volumes:
      - postgres_microservices_data:/var/lib/postgresql/data

volumes:
  postgres_keycloak_data:
  mongodb_data:
  postgres_microservices_data: